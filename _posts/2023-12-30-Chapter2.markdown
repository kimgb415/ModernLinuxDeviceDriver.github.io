---
layout: post
title:  "Chapter 2. Building and Running Modules"
date:   2023-12-30 22:32:15 +0900
categories: Chapter 2
---

## Hello World Module
> ðŸ’¡ Full code in [Chapter 2][ch2]

Here, we are implementing the easiest form of scull module by mimicking the one shown in the book.
### `main.c`
{% highlight c %}
/*
 * Gaby Kim -- Linux Device Driver with linux 6.7.0
 *
 * Original Code from "main.c -- the bare scull char module"
 * Copyright (C) 2001 Alessandro Rubini and Jonathan Corbet
 * Copyright (C) 2001 O'Reilly & Associates
 *
 * This file includes modifications by Gaby, Kim
 * on 12/23/2023
 *
 * The source code in this file is based on code from the book "Linux Device
 * Drivers" by Alessandro Rubini and Jonathan Corbet, published by O'Reilly & Associates.
 * The original code can be freely used, adapted, and redistributed in source or binary form,
 * so long as an acknowledgment appears in derived source files.
 *
 * No warranty is attached to the original code and this modified version; 
 * neither the original authors nor [Your Name or Your Organization] can take 
 * responsibility for errors or fitness for use.
 *
 */


#include <linux/init.h>
#include <linux/module.h>

MODULE_AUTHOR("Gaby, Kim");
MODULE_DESCRIPTION("scull device driver in Linux Device Driver with linux 6.7.0");
MODULE_LICENSE("GPL v2");


static int __init scull_init_module(void)
{
	pr_debug("scull module loaded\n");

	return 0;
}

// cleanup function can't be marked as __exit, if it's used else where other than module_exit
static void __exit scull_cleanup_module(void)
{
	pr_debug("scull module unloaded\n");
};

module_init(scull_init_module);
module_exit(scull_cleanup_module);
{% endhighlight %}

### Notes
- `scull_clean_up` function is marked `__exit` here, since it is only called during `module_exit` 
- Followings are the two methods I used to monitor the `printk` messages
  - `through sudo dmesg | tail command`, with `kernel.printk = 7 4 1 7` is set in `/etc/sysctl.conf`
  - default `rsyslog` rule dumps all the kernel messages into `/var/log/kern.log`, hence kernel messages can also be monitored through `cat /var/log/kern.log | tail` command
- If you still canâ€™t see the `printk` messages or the messages seem delayed, you might have forget the `\n` character. <https://unix.stackexchange.com/questions/167655/module-prints-to-kernel-log-with-delay>


## Modern Linux `kbuild`

Now comes the fun part regarding Makefile. Modern Linux kernel has a more complex build system called `kbuild`. References for the related documents are as below.

- [Linux Kconfig Languages][kconfig]
- [Linux makefiles][makefiles]

### `Kconfig`

There are three `Kconfig` files in total to make our device driver into a loadable module of the Linux source tree.

- `{YOUR LINUX SOURCE TREE}/drivers/{LDD DIRECTORY}/scull/Kconfig` define the configuration symbols for your scull device driver
{% highlight plaintext %}
config SCULL
    tristate "Scull driver by Gaby, Kim"
    depends on LDD
    help
        This is scull device driver based on Linux Device Drvier, 3rd edition,
        compatible with linux 6.7.0, Authored by Gaby, Kim.
{% endhighlight %}

- `{YOUR LINUX SOURCE TREE}/drivers/{LDD DIRECTORY}/Kconfig` will source all the `Kconfig` files in subdirectories
{% highlight plaintext %}
menuconfig LDD
    bool "Linux Device Driver by Gaby Kim"
    help 
        This is the menu for drivers related to 
        Linux Device Driver 3rd edition, compatible with
        linux 6.7.0

source "drivers/gakim/scull/Kconfig"
{% endhighlight %}

- Lastly, `{YOUR LINUX SOURCE TREE}/drivers/Kconfig` will source the LDD `Kconfig` so that all the configurations do appear in your `menuconfig` 

{% highlight plaintext %}
...
source "drivers/{LDD DIRECTORY}/Kconfig"
...
endmenu
{% endhighlight %}

After all the above `Kconfig`s are set, you will be able to find and change the configuration symbols in `make menuconfig` as below

![make menuconfig]({{ "/assets/img/chapter2/menuconfig.png" | prepend: site.baseurl }})

### `Makefile`
We are now ready to implement the `Makefile`, and it looks quiet different from the one shown in the book

{% highlight make %}
# If KERNELRELEASE is defined, we've been invoked from the
# kernel build system and can use its language.
ifneq ($(KERNELRELEASE),)
	obj-$(CONFIG_SCULL) += scull.o
	scull-y := main.o

# Otherwise we were called directly from the command
# line; invoke the kernel build system.
else
	KDIR ?= ~/kernels/staging
	PWD := $(shell pwd)

modules:
	$(MAKE) -C $(KDIR) M=$(PWD) modules

clean:
	$(MAKE) -C $(KDIR) M=$(PWD) clean

endif


# dependency tracking in modern kernel is document in
# https://github.com/torvalds/linux/blob/master/Documentation/kbuild/makefiles.rst#dependency-tracking
{% endhighlight %}


- `scull-y` defines all the required source codes to build `scull.o`
- `obj-$(CONFIG_SCULL)` symbol will handle the module configuration for us
- `KDIR` variable should be set to the directory of our kernel source tree

With above `Makefile`, we can execute `make` or `make clean` directly in the directory of scull device driver, and it will find the kernel build system and then trigger corresponding targets for us.

> I have tested the `Makefile` shown in the book and it also worked. However, codes from now on are all made through the modern `kbuild` system.

### Notes
- If modules are not built with `make` command, make sure `CONFIG_SCULL` and `CONFIG_LDD` are properly set in your `.config` file

[ch2]: https://github.com/kimgb415/gaby-ldd/tree/Chapter2
[kconfig]: https://github.com/torvalds/linux/blob/master/Documentation/kbuild/kconfig-language.rst
[makefiles]: https://github.com/torvalds/linux/blob/master/Documentation/kbuild/makefiles.rst
